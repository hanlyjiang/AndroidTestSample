//jacoco.gradle
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.7"
}

android {
    publishNonDefault true
    buildTypes {
        debug {
            testCoverageEnabled = true
        }
    }
}

def genMergeTask = true
project.apply {
    project.extensions.create("jacocoAndroid",
            JacocoAndroidExtension,
            JacocoAndroidExtension.defaultExcludesFactory({}))
    project.plugins.apply(JacocoPlugin)
    Plugin plugin = findAndroidPluginOrThrow(project.plugins)

    def variants = getVariants(project, plugin)
    // agp 7.2.0 之前的版本，library模块中可使用时，使用此任务可规避无法合并的问题
    Task jacocoTestReportTask = findOrCreateJacocoTestReportTask(project.tasks)

    variants.all { variant ->
        def unitTestTask = tasks.getByName("test${variant.name.capitalize()}UnitTest")
        def createDebugCoverageReportTask = tasks.getByName("createDebugCoverageReport")

        def sourceDirs = variant.sourceSets.java.srcDirs.collect { it.path }.flatten()
        def classesDir
        if (variant.hasProperty('javaCompileProvider')) {
            classesDir = variant.javaCompileProvider.get().destinationDir
        } else {
            classesDir = variant.javaCompile.destinationDir
        }
        def androidTestPath = "${project.buildDir}/outputs/code_coverage/debugAndroidTest/connected/"
        def unitTestExecutionData = unitTestTask.jacoco.destinationFile.path

        FileTree javaTree = project.fileTree(dir: classesDir, excludes: project.jacocoAndroid.excludes)
        def kotlinClassesDir = "${project.buildDir}/tmp/kotlin-classes/${variant.name}"
        def kotlinTree = project.fileTree(dir: kotlinClassesDir, excludes: project.jacocoAndroid.excludes)

        JacocoMerge mergeTask = null;
        if (genMergeTask) {
            // keep mergeTask because android studio can not recognise androidTest *.ec (Run - Show Coverage Data)
            mergeTask = tasks.create("jacocoMerge${variant.name.capitalize()}Exec", JacocoMerge.class) {
                executionData(fileTree(unitTestExecutionData), fileTree(androidTestPath))
                destinationFile = new File("${project.buildDir}/jacoco/${variant.name}-${name}.exec")
                group("reporting")
                dependsOn(unitTestTask, createDebugCoverageReportTask)
                doFirst {
                    executionData.forEach {
                        logger.log(LogLevel.LIFECYCLE, "-mergeTask exec: $it.absolutePath")
                    }
                }
            }
        }
        JacocoReport reportTask = tasks.create("jacocoTest${variant.name.capitalize()}Report", JacocoReport.class) {
            group("reporting")
            if (mergeTask != null) {
                dependsOn(mergeTask)
                executionData.from(fileTree(mergeTask.destinationFile))
            } else {
                dependsOn(unitTestTask, createDebugCoverageReportTask)
                executionData.from(fileTree(unitTestExecutionData), fileTree(androidTestPath))
            }

            sourceDirectories.from(files(sourceDirs))
            classDirectories.from(files(javaTree), files(kotlinTree))

            reports {
                def destination = project.jacocoAndroid.destination
                xml.enabled = true
                html.enabled true
                html.destination new File((destination == null) ? "${project.buildDir}/jacoco/jacocoHtml" : "${destination.trim()}/jacocoHtml")
            }
        }
        jacocoTestReportTask.dependsOn reportTask
    }
}

class JacocoAndroidExtension {

    public static final Collection<String> androidDataBindingExcludes =
            ['android/databinding/**/*.class',
             '**/android/databinding/*Binding.class',
             '**/databinding/*Binding.class',
             '**/databinding/*BindingImpl.class',
             '**/databinding/*Sw600dpImpl.class',
             '**/BR.*'].asImmutable()

    public static final Collection<String> androidExcludes =
            ['**/R.class',
             '**/R$*.class',
             '**/BuildConfig.*',
             '**/Manifest*.*'].asImmutable()

    public static final Collection<String> butterKnifeExcludes =
            ['**/*$ViewInjector*.*',
             '**/*$ViewBinder*.*'].asImmutable()

    public static final Collection<String> dagger2Excludes =
            ['**/*_MembersInjector.class',
             '**/Dagger*Component.class',
             '**/Dagger*Component$Builder.class',
             '**/*Module_*Factory.class'].asImmutable()

    public static final Collection<String> defaultExcludes =
            (androidDataBindingExcludes + androidExcludes + butterKnifeExcludes + dagger2Excludes)
                    .asImmutable()

    def static defaultExcludesFactory = { defaultExcludes }

    Collection<String> excludes
    boolean csv
    boolean html
    boolean xml
    String destination

    JacocoAndroidExtension(Collection<String> excludes) {
        this.excludes = excludes
        this.csv = true
        this.html = true
        this.xml = true
        this.destination = null
    }
}


private static def getVariants(Project project, Plugin plugin) {
    boolean isLibraryPlugin = plugin.class.name.endsWith('.LibraryPlugin')
    project.android[isLibraryPlugin ? "libraryVariants" : "applicationVariants"]
}

private static Plugin findAndroidPluginOrThrow(PluginContainer plugins) {
    Plugin plugin = plugins.findPlugin('android') ?: plugins.findPlugin('android-library')
    if (!plugin) {
        throw new GradleException(
                'You must apply the Android plugin or the Android library plugin before using the jacoco-android plugin')
    }
    plugin
}

private static Task findOrCreateJacocoTestReportTask(TaskContainer tasks) {
    Task jacocoTestReportTask = tasks.findByName("jacocoTestReport")
    if (!jacocoTestReportTask) {
        jacocoTestReportTask = tasks.create("jacocoTestReport")
        jacocoTestReportTask.group = "Reporting"
    }
    jacocoTestReportTask
}